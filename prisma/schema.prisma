generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("NEXT_PUBLIC_DB_URL")
}

enum AchievementCategory {
  COMPETITION
  RESEARCH
  SPORTS
  CULTURAL
  TECHNICAL
  ACADEMIC
}

enum AchievementType {
  SOLO
  TEAM
}

enum EventType {
  TECHNICAL
  NON_TECHNICAL
}

enum TeamCategory {
  OFFICE_BEARERS
  DEV_TEAM
}

enum GalleryCategory {
  TECHNICAL
  CULTURAL
  SPORTS
  SOCIAL
  ACADEMIC
  WORKSHOP
  SEMINAR
  INDUSTRIAL_VISIT
  PROJECT_EXHIBITION
  OUTREACH
  ORIENTATION
}

model User {
  id    Int    @id @default(autoincrement())
  name  String
  email String @unique
}

model Achievement {
  id             Int                 @id @default(autoincrement())
  title          String
  description    String
  photoUrl       String
  category       AchievementCategory
  type           AchievementType // SOLO, TEAM, GROUP
  rank           Int? // Only for Competitions
  event          String? // Event/Competition name
  organizer      String? // Who organized the event
  venue          String? // Where it took place
  date           DateTime
  githubUrl      String? // Project related GitHub (if applicable)
  researchLink   String? // Only for Research
  projectUrl     String? // Project demo/website link
  certificateUrl String? // Certificate image/PDF link
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt

  // Relationship with achievement members
  members AchievementMember[]
}

model AchievementMember {
  id            Int     @id @default(autoincrement())
  achievementId Int
  name          String
  role          String? // e.g., "Team Lead", "Developer", "Researcher"
  rollNumber    String? // Student roll number
  year          String? // Academic year like "2024-25"
  branch        String? // Branch/Department
  linkedinUrl   String?
  githubUrl     String?
  instagramUrl  String?
  portfolioUrl  String?
  photoUrl      String? // Individual member photo

  // Relationship
  achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@index([achievementId])
}

model Event {
  id          Int       @id @default(autoincrement())
  name        String
  type        EventType
  venue       String
  date        DateTime // Includes both date & time
  image       String
  description String
  attendees   Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model TeamPage {
  id           Int          @id @default(autoincrement())
  name         String
  role         String
  index        Int
  category     TeamCategory
  photoUrl     String
  linkedinUrl  String?
  githubUrl    String?
  instagramUrl String?
  portfolioUrl String?
  year         String // Stores "2024-25"
  quote        String?
}

model Faculty {
  id          Int     @id @default(autoincrement())
  name        String
  designation String
  photoUrl    String
  linkedinUrl String?
  quote       String?
}

model News {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  date        DateTime
  photoUrl    String
  link        String
  category    String?
  fetchedAt   DateTime?
}

model Gallery {
  id          Int             @id @default(autoincrement())
  title       String
  description String
  photoUrl    String
  category    GalleryCategory
  carousel    Boolean
}

model Settings {
  id              Int      @id @default(autoincrement())
  maintenanceMode Boolean  @default(false)
  updatedAt       DateTime @default(now()) @updatedAt
}
